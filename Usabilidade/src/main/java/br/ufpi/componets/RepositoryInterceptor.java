package br.ufpi.componets;

import java.io.Serializable;
import java.lang.reflect.Field;

import javax.persistence.Id;

import net.vidageek.mirror.dsl.Matcher;
import net.vidageek.mirror.dsl.Mirror;

import org.hibernate.CallbackException;
import org.hibernate.EmptyInterceptor;
import org.hibernate.EntityMode;

import br.com.caelum.iogi.Instantiator;
import br.com.caelum.iogi.parameters.Parameters;
import br.com.caelum.iogi.reflection.Target;
import br.com.caelum.vraptor.ioc.Component;

@Component
public class RepositoryInterceptor extends EmptyInterceptor {

	/**
	 * generated by eclipse
	 */
	private static final long serialVersionUID = 5848222336834528934L;

	private final Instantiator<Object> instantiator;

	public RepositoryInterceptor(Instantiator<Object> instantiator) {
		this.instantiator = instantiator;
	}

	@Override
	public Object instantiate(String className, EntityMode mode, Serializable id) throws CallbackException {
		Object object = instantiator.instantiate(new Target(new Mirror().reflectClass(className), ""), new Parameters());

		Field field = new Mirror().on(className).reflectAll().fieldsMatching(new Matcher<Field>() {
			public boolean accepts(Field field) {
				return field.isAnnotationPresent(Id.class);
			}
		}).get(0);

		new Mirror().on(object).set().field(field).withValue(id);
		return object;
	}

}