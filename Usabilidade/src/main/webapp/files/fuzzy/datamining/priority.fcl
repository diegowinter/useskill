

FUNCTION_BLOCK fuzzy		// Block definition (there may be more than one block per file)

VAR_INPUT					// Define input variables
	time 		: REAL;
	actions 	: REAL;
END_VAR

VAR_OUTPUT					// Define output variable
	priority 	: REAL;
END_VAR

FUZZIFY time				// Fuzzify input variable 'time': {'poor', 'moderate' , 'good'}
	TERM poor := 			(0, 1) (0.4, 0);
	TERM moderate := 		(0.2, 0) (0.5, 1) (0.8, 0);
	TERM good := 			(0.6, 0) (1, 1);
END_FUZZIFY

FUZZIFY actions				// Fuzzify input variable 'actions': {'poor', 'moderate' , 'good'}
	TERM poor := 			(0, 1) (0.4, 0);
	TERM moderate := 		(0.2, 0) (0.5, 1) (0.8, 0);
	TERM good := 			(0.6, 0) (1, 1);
END_FUZZIFY

DEFUZZIFY priority			// Defuzzify output variable 'priority' : {'low', 'average' , 'high'}
	TERM low := 			(0, 1) (0.4, 0);
	TERM average := 		(0.2, 0) (0.5, 1) (0.8, 0);
	TERM high := 			(0.6, 0) (1, 1);
	METHOD : COG;			// Use 'Center Of Gravity' defuzzification method
	DEFAULT := 0;			// Default value is 0 (if no rule activates defuzzifier)
END_DEFUZZIFY

RULEBLOCK No1
	AND : MIN;				// Use 'min' for 'and' (also implicit use 'max' for 'or' to fulfill DeMorgan's Law)
	ACT : MIN;				// Use 'min' activation method
	ACCU : MAX;				// Use 'max' accumulation method

	RULE 1 : 	IF time IS poor 		AND actions IS poor 		THEN priority IS low;
	RULE 2 : 	IF time IS poor 		AND actions IS moderate 	THEN priority IS low;
	RULE 3 : 	IF time IS moderate 	AND actions IS poor	 		THEN priority IS low;
	RULE 4 : 	IF time IS poor 		AND actions IS good 		THEN priority IS average;
	RULE 5 : 	IF time IS moderate 	AND actions IS moderate 	THEN priority IS average;
	RULE 6 : 	IF time IS good		 	AND actions IS poor 		THEN priority IS average;
	RULE 7 : 	IF time IS moderate 	AND actions IS good 		THEN priority IS high;
	RULE 8 : 	IF time IS good 		AND actions IS moderate 	THEN priority IS high;
	RULE 9 : 	IF time IS good 		AND actions IS good 		THEN priority IS high;
	
END_RULEBLOCK

END_FUNCTION_BLOCK